const CACHE_VERSION = 'v1';
const CACHE_NAME = `<%= cache_prefix %>-pwa-${CACHE_VERSION}`;
const CACHE_MAX_AGE = 7 * 24 * 60 * 60 * 1000; // 7 days

const STATIC_CACHE_URLS = [
  '<%%= asset_path("application.css") %>',
  '<%%= asset_path("application.js") %>',
  '<%%= asset_path("app-favicon.svg") %>'
];

self.addEventListener('install', event => {
  event.waitUntil(
    caches.open(CACHE_NAME)
      .then(cache => cache.addAll(STATIC_CACHE_URLS))
      .then(() => self.skipWaiting())
  );
});

self.addEventListener('activate', event => {
  event.waitUntil(
    caches.keys().then(cacheNames => {
      return Promise.all(
        cacheNames
          .filter(cacheName => cacheName.startsWith('<%= cache_prefix %>-pwa-') && cacheName !== CACHE_NAME)
          .map(cacheName => caches.delete(cacheName))
      );
    }).then(() => self.clients.claim())
  );
});

// Network-first strategy for HTML pages
// Cache-first strategy for static assets
self.addEventListener('fetch', event => {
  if (event.request.method !== 'GET') {
    return;
  }

  const url = new URL(event.request.url);
  const isHTMLPage = event.request.headers.get('accept')?.includes('text/html');

  // Network-first for HTML pages (always get fresh content)
  if (isHTMLPage) {
    event.respondWith(
      fetch(event.request)
        .then(response => response)
        .catch(() => caches.match(event.request))
    );
    return;
  }

  // Cache-first for static assets
  event.respondWith(
    caches.match(event.request)
      .then(cachedResponse => {
        // Return cached response if found and not expired
        if (cachedResponse) {
          const cacheDate = new Date(cachedResponse.headers.get('date'));
          const now = new Date();
          if (now - cacheDate < CACHE_MAX_AGE) {
            return cachedResponse;
          }
        }

        // Fetch from network
        return fetch(event.request)
          .then(response => {
            // Only cache successful responses for static assets
            if (response && response.status === 200 && response.type === 'basic') {
              const responseToCache = response.clone();
              caches.open(CACHE_NAME)
                .then(cache => cache.put(event.request, responseToCache));
            }
            return response;
          })
          .catch(() => cachedResponse); // Fallback to cached response if network fails
      })
  );
});

// Handle unregister message
self.addEventListener('message', event => {
  if (event.data === 'skipWaiting') {
    self.skipWaiting();
  }
  if (event.data === 'clearCache') {
    event.waitUntil(
      caches.keys().then(cacheNames => {
        return Promise.all(
          cacheNames.map(cacheName => caches.delete(cacheName))
        );
      })
    );
  }
});
